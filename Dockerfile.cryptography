# syntax=docker/dockerfile:experimental
ARG PYVER=3.10
FROM python:$PYVER-slim as builder

# Before switching user
RUN apt-get update -qq && apt-get install -yqq \
build-essential libssl-dev libffi-dev python3-dev \
curl findutils && apt-get clean -yqq && rm -rf /var/lib/apt/lists/*

ENV SHELL "/bin/sh"
ENV HOME "/home/rust-test"
RUN useradd -d $HOME -m -s /bin/sh rust-test
USER rust-test

ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONIOENCODING="UTF-8"
ENV PYTHONUNBUFFERED=1

ENV PIP_DEFAULT_TIMEOUT=100
ENV PIP_NO_CACHE_DIR=off

ENV VENV_DIR $HOME/venv

RUN python3 -m venv $VENV_DIR --upgrade --upgrade-deps
RUN pip install --upgrade wheel setuptools-rust setuptools-scm

RUN --security=insecure curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sed 's#/proc/self/exe#$SHELL#g' | sh -s -- -y --profile minimal --default-toolchain nightly

ENV CARGO_HOME "$HOME/.cargo"
ENV PATH "$CARGO_HOME/bin:$PATH"

ENV WHEELS $HOME/wheels
RUN mkdir -p $WHEELS

RUN rustc --version
RUN cargo --version
RUN rustup --version

RUN --mount=type=tmpfs,target=$CARGO_HOME pip wheel cryptography --no-binary cryptography --wheel-dir $WHEELS

RUN rm -rf $WHEELS/*none-any.whl && rm -rf $WHEELS/*.gz;

CMD ["sh", "-c", "ls -lR $WHEELS"]

FROM scratch AS wheels
COPY --from=builder /home/rust-test/wheels /


